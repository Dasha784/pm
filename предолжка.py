import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
)

# üîë –¢–æ–∫–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8325150191:AAGJ2Cg7WxQ3ltNnRj3VMBcZGrtmq9A1djo"
ADMIN_ID = 914123397
CHANNEL_ID = -1002858204554

# üéØ –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
CHOOSE_CATEGORY, TYPING_MESSAGE = range(2)

# üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)


# üß© –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å:\n\n"
        "üí° –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\nüì¢ –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–∫–ª–∞–º—É\n‚≠êÔ∏è –æ—Ç–∑—ã–≤\n\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π.\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å:"
    )

    keyboard = [
        [
            InlineKeyboardButton("üì¢ –†–µ–∫–ª–∞–º–∞", callback_data="category_ad"),
            InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="category_suggestion"),
        ],
        [InlineKeyboardButton("‚≠êÔ∏è –û—Ç–∑—ã–≤", callback_data="category_feedback")],
    ]

    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    return CHOOSE_CATEGORY


# üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "back_to_menu":
        return await start(update, context)

    context.user_data["category"] = query.data
    readable = {
        "category_ad": "—Ä–µ–∫–ª–∞–º—É",
        "category_suggestion": "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
        "category_feedback": "–æ—Ç–∑—ã–≤",
    }

    text = (
        f"‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: *{readable[query.data]}*.\n"
        "–û–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    await query.message.edit_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

    return TYPING_MESSAGE


# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category_map = {
        "category_ad": "üì¢ –†–µ–∫–ª–∞–º–∞",
        "category_suggestion": "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
        "category_feedback": "‚≠êÔ∏è –û—Ç–∑—ã–≤",
    }

    category = context.user_data.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    category_label = category_map.get(category, category)
    username = update.effective_user.username or f"id {update.effective_user.id}"

    message_text = (
        f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username}\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_label}\n\n"
        f"{update.message.text}"
    )

    await context.bot.send_message(chat_id=CHANNEL_ID, text=message_text)

    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    return ConversationHandler.END


# üîö –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    elif update.callback_query:
        await update.callback_query.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# üì© –ö–æ–º–∞–Ω–¥–∞ 1: –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ user_id
async def send_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sendto <user_id> <—Ç–µ–∫—Å—Ç>")
        return

    try:
        user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    message_text = " ".join(context.args[1:])

    try:
        await context.bot.send_message(chat_id=user_id, text=message_text)
        await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")


# üì© –ö–æ–º–∞–Ω–¥–∞ 2: –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ @username
async def send_to_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sendtouser <username> <—Ç–µ–∫—Å—Ç>")
        return

    username = context.args[0]
    if username.startswith("@"):
        username = username[1:]

    message_text = " ".join(context.args[1:])

    try:
        await context.bot.send_message(chat_id=f"@{username}", text=message_text)
        await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")


# üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token(TOKEN).build()

    # –¥–∏–∞–ª–æ–≥
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_CATEGORY: [CallbackQueryHandler(choose_category)],
            TYPING_MESSAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                CallbackQueryHandler(choose_category),  # –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥"
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv_handler)

    # –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
    app.add_handler(CommandHandler("sendto", send_to_user))  # –ø–æ id
    app.add_handler(CommandHandler("sendtouser", send_to_username))  # –ø–æ username

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
